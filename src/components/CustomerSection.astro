---
import Customer from "./Customer.astro";

import Alpine from "alpinejs";

const customers = [
    {
        'name' : 'Airbnb',
        'logo' : '/images/logo-Airbnb.png',
        'color' : '#FF5A5F',
        'tailwindCSS' : 'bg-[#FF5A5F]'
    },
    {
        'name' : 'Peloton',
        'logo' : '/images/logo-Peloton.png',
        'color' : '#000',
        'tailwindCSS' : 'bg-[#000]'
    },
    {
        'name' : 'Evernote',
        'logo' : '/images/logo-Evernote.png',
        'color' : '#292929',
        'tailwindCSS' : 'bg-[#292929]'
    },
    {
        'name' : 'Samsung',
        'logo' : '/images/logo-Samsung.png',
        'color' : '#1428A0',
        'tailwindCSS' : 'bg-[#1428A0]'
    },
    {
        'name' : 'Nginx',
        'logo' : '/images/logo-Nginx.png',
        'color' : '#00AA4E',
        'tailwindCSS' : 'bg-[#00AA4E]'
    },
    {
        'name' : 'PagerDuty',
        'logo' : '/images/logo-PagerDuty.png',
        'color' : '#5DBD5F',
        'tailwindCSS' : 'bg-[#5DBD5F]'
    },
    {
        'name' : 'WholeFoods',
        'logo' : '/images/logo-WholeFoods.png',
        'color' : '#000',
        'tailwindCSS' : 'bg-[#000]'
    },
    {
        'name' : 'ATT',
        'logo' : '/images/logo-ATT.png',
        'color' : '#00A8E0',
        'tailwindCSS' : 'bg-[#00A8E0]'
    }
];
---

<section>
    <ul x-data="customers" class="grid grid-cols-3">
        {customers.map((company) => 
            <Customer name={company.name} logoUrl={company.logo} color={company.color} class={company.tailwindCSS}>
            </Customer>
        )}
        <li @click="updateTestimony" class="hidden bg-datadogRed chosenCompany" id="AdRoll">AdRoll</li>

        <!--
            Testimonal Highlight
            - content changes based on user clicks in above company list
            - placement as the last item in the list is intentional for layout purposes
            - TODO: is there a more elegant way (i.e. init function) to set the default content on page load? (current limitation is that updateTestimony logic relies on a Alpine-specific magic property that's only available after the DOM renders)
        -->
        <li class="block row-start-1 col-start-2 col-span-2 row-span-2 bg-gray-300">
            <div id="customer-testimony">
                <h1 id="customer-company">AdRoll</h1>
                <p id="customer-quote">Datadog has been instrumental in managing our real-time infrastructure, globally distributed in 5 data centers across hundreds of instances, and thousands of different metrics and dimensions for each host. I can't believe there was a time when we didn't have Datadog.</p>
                <p id="customer-name">Valentino Volonghi</p>
                <p id="customer-title">Chief Technology Officer</p>
                <a class="text-datadogPurple hover:underline" href="#">See More Stories</a>
            </div>
        </li>
    </ul>
</section>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('customers', () => ({ 
            updateTestimony() {
                // identify chosenCompany via clicked element's ID
                const chosenCompany = this.$el.id;

                // show any previously hidden companies
                const hiddenCompanies = document.getElementsByClassName('chosenCompany');

                /* 
                    for the majority of cases hiddenCompany will be a collection of one object
                    however, the event of a race condition in which both the previous chosenCompany and current chosenCompany are retrieved, below logic  will ensure the current chosenCompany remains hidden
                */
                for (let i = 0; i < hiddenCompanies.length; i++) {
                    console.log('company is = ', hiddenCompanies[i].id, 'chosenCompany is = ', chosenCompany);

                    // confirm element is not current chosenCompany
                    if (hiddenCompanies[i].id !== chosenCompany) {
                        // show element
                        hiddenCompanies[i].classList.remove('chosenCompany', 'hidden');
                    }
                }

                // use chosenCompany to retrieve corresponding data in testimonials object and update the DOM (all elements are within the Testimonal Highlight)
                document.getElementById('customer-company').innerHTML = chosenCompany;
                document.getElementById('customer-quote').innerHTML = testimonials[chosenCompany].quote;
                document.getElementById('customer-name').innerHTML = testimonials[chosenCompany].name;
                document.getElementById('customer-title').innerHTML = testimonials[chosenCompany].title;

                // hide chosenCompany element; custom class chosenCompany is needed for show any previously hidden companies logic
                this.$el.classList.add('chosenCompany', 'hidden');
            }
        }))
    })

    const testimonials = {
        "Acme": {
            "quote" : "A rave review",
            "name" : "Firstname Lastname",
            "title" : "CEO"
        }, 
        "AdRoll": {
            "quote" : "Datadog has been instrumental in managing our real-time infrastructure, globally distributed in 5 data centers across hundreds of instances, and thousands of different metrics and dimensions for each host. I can't believe there was a time when we didn't have Datadog.",
            "name" : "Valentino Volonghi",
            "title" : "Chief Technology Officer"
        },
        "Airbnb": {
            "quote" : "We use Datadog and a lot of whatever-as-a-service, in large part because their offerings continue to get better, even when we're not looking",
            "name" : "Ben",
            "title" : "Site Reliabilty Engineer"
        },
        "Peloton": {
            "quote" : "We have a very data-driven platform, so a lot of what we're doing is searching through a library of content for our users. Just looking through the code, it's not always obvious how that's going to work.",
            "name" : "Chris Mohr",
            "title" : "Software Engineer"
        },
        "Evernote": {
            "quote" : "a rave review from Evernote",
            "name" : " ",
            "title" : " "
        },
        "Samsung": {
            "quote" : "a rave review from Samsung",
            "name" : " ",
            "title" : " "
        },
        "Nginx": {
            "quote" : "a rave review from Nginx",
            "name" : " ",
            "title" : " "
        },
        "PagerDuty": {
            "quote" : "a rave review from PagerDuty",
            "name" : " ",
            "title" : " "
        },
        "WholeFoods": {
            "quote" : "a rave review from WholeFoods",
            "name" : " ",
            "title" : " "
        },
        "ATT": {
            "quote" : "a rave review from ATT",
            "name" : " ",
            "title" : " "
        }
    };
</script>